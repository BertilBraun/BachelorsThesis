/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8
test.testLogging.showStandardStreams = true

sourceSets {
   main {
      java {
         srcDir 'src'
      }
        resources {
            srcDir 'resources'
        }
   }
   test {
      java {
         srcDir 'tests'
      }
      resources {
          srcDir 'testRes'
      }
   }
}

checkstyle {
    toolVersion '8.45.1';    // your choice here
}

checkstyleMain {
    source ='src/'
}

checkstyleTest {
    source ='tests/'
}

test {
    useJUnitPlatform()
}



// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'lib')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
}

task fatJar(type: Jar) {
    dependsOn tasks.getByPath("classes")

    manifest {
        attributes "Main-Class": "cli.Main"
    }
    archiveBaseName = 'JJBMC'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    doLast {
        copy {
            from 'build/libs/JJBMC.jar'
            into '.'
        }
    }
}

task testJar(type: Jar) {
    dependsOn tasks.getByPath("classes")
    dependsOn tasks.getByPath("testClasses")

    manifest {
        attributes "Main-Class": "test.TestRunner"
    }
    archiveBaseName = 'JJBMC-test'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    sourceSets.main.output.each {
        from it
    }
    sourceSets.test.output.each {
        from it
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    doLast {
        copy {
            from 'build/libs/JJBMC-test.jar'
            into '.'
        }
    }
}

task harshCheckstyle(type: Checkstyle) {
    source = "src/"
    configFile = file("${rootDir}/config/checkstyle/checkstyleHarsh.xml")
    classpath = files()
}

task caseStudies(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = "casestudy.CaseStudies"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}