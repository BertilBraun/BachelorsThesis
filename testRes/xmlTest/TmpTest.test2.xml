<?xml version="1.0" encoding="UTF-8"?>
<cprover>
    <program>JBMC 5.22.0 (cbmc-5.22.0)</program>
    <message type="STATUS-MESSAGE">
        <text>JBMC version 5.22.0 (cbmc-5.22.0) 64-bit x86_64 linux</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Parsing ...</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Trying to load Java main class: TmpTest</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Found Java main class: TmpTest</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Converting</text>
    </message>

    <message type="WARNING">
        <text>stub class symbol java::java.lang.Object already exists</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Java: added 35 String or Class constant symbols</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Generating GOTO Program</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Running GOTO functions transformation passes</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Running with 16 object bits, 48 offset bits (default)</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Starting Bounded Model Checking</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Unwinding recursion java::TmpTest.&lt;clinit_wrapper&gt; iteration 1</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>aborting path on assume(false) at file TmpTest.java line 73 function java::TmpTest.test2:(I)V bytecode-index 9 thread 0</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Runtime Symex: 0.00144907s</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>size of program expression: 74 steps</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>simple slicing removed 6 assignments</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Generated 4 VCC(s), 1 remaining after simplification</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Runtime Postprocess Equation: 1.636e-05s</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Passing problem to string refinement loop with MiniSAT 2.2.1 without simplifier</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>converting SSA</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Runtime Convert SSA: 0.000202209s</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Running string refinement loop with MiniSAT 2.2.1 without simplifier</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>BV-Refinement: post-processing</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>BV-Refinement: iteration 1</text>
    </message>

    <refinement-iteration>1</refinement-iteration>

    <message type="STATUS-MESSAGE">
        <text>450 variables, 290 clauses</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>SAT checker: instance is SATISFIABLE</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>
            BV-Refinement: got SAT, and it simulates =&gt; SAT</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Total iterations: 1</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Runtime Solver: 0.000296259s</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Runtime decision procedure: 0.000534138s</text>
    </message>

    <message type="STATUS-MESSAGE">
        <text>Building error trace</text>
    </message>

    <result property="java::TmpTest.test2:(I)V.1" status="SUCCESS"/>

    <result property="array-create-negative-size.9" status="SUCCESS"/>

    <result property="array-create-negative-size.7" status="SUCCESS"/>

    <result property="array-create-negative-size.6" status="SUCCESS"/>

    <result property="array-create-negative-size.5" status="SUCCESS"/>

    <result property="array-create-negative-size.4" status="SUCCESS"/>

    <result property="array-create-negative-size.3" status="SUCCESS"/>

    <result property="array-create-negative-size.2" status="SUCCESS"/>

    <result property="array-create-negative-size.1" status="SUCCESS"/>

    <result property="java::TmpTest.&lt;clinit&gt;:()V.null-pointer-exception.1" status="SUCCESS"/>

    <result property="java::TmpTest.test2:(I)V.assertion.1" status="FAILURE">
        <goto_trace>
            <function_call hidden="false" step_nr="2" thread="0">
                <function display_name="__CPROVER_initialize" identifier="__CPROVER_initialize">
                    <location/>
                </function>
            </function_call>
            <assignment assignment_type="state" base_name="__CPROVER_rounding_mode" display_name="__CPROVER_rounding_mode" hidden="false" identifier="__CPROVER_rounding_mode" mode="C" step_nr="3" thread="0">
                <type>signed int</type>
                <full_lhs>__CPROVER_rounding_mode</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="TmpTest@class_model" display_name="java::TmpTest@class_model" hidden="false" identifier="java::TmpTest@class_model" mode="java" step_nr="4" thread="0">
                <type>struct java.lang.Class</type>
                <full_lhs>TmpTest@class_model.@class_identifier</full_lhs>
                <full_lhs_value>"java::java.lang.Class"</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="@inflight_exception" display_name="java::@inflight_exception" hidden="true" identifier="java::@inflight_exception" mode="java" step_nr="5" thread="0">
                <type>void *</type>
                <full_lhs>@inflight_exception</full_lhs>
                <full_lhs_value binary="0000000000000000000000000000000000000000000000000000000000000000">null</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="java::TmpTest::clinit_already_run" display_name="java::TmpTest::clinit_already_run" hidden="false" identifier="java::TmpTest::clinit_already_run" mode="java" step_nr="6" thread="0">
                <type>__CPROVER_bool</type>
                <full_lhs>java$$TmpTest$$clinit_already_run</full_lhs>
                <full_lhs_value>false</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="$assertionsDisabled" display_name="TmpTest.$assertionsDisabled" hidden="false" identifier="java::TmpTest.$assertionsDisabled" mode="java" step_nr="7" thread="0">
                <type>const boolean</type>
                <full_lhs>$assertionsDisabled</full_lhs>
                <full_lhs_value binary="00000000">false</full_lhs_value>
            </assignment>
            <function_return hidden="false" step_nr="8" thread="0">
                <function display_name="__CPROVER_initialize" identifier="__CPROVER_initialize">
                    <location/>
                </function>
            </function_return>
            <assignment assignment_type="state" base_name="uncaught_exception'" display_name="uncaught_exception'" hidden="true" identifier="uncaught_exception'" mode="java" step_nr="9" thread="0">
                <type>void *</type>
                <full_lhs>uncaught_exception'</full_lhs>
                <full_lhs_value binary="0000000000000000000000000000000000000000000000000000000000000000">null</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="arg0i" display_name="__CPROVER__start::arg0i" hidden="true" identifier="__CPROVER__start::arg0i" mode="java" step_nr="10" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
                <type>int</type>
                <full_lhs>arg0i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="arg0i" display_name="__CPROVER__start::arg0i" hidden="true" identifier="__CPROVER__start::arg0i" mode="java" step_nr="11" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
                <type>int</type>
                <full_lhs>arg0i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <input hidden="false" step_nr="12" thread="0">
                <input_id>arg0i</input_id>
                <value>0</value>
                <value_expression>
                    <integer binary="00000000000000000000000000000000" c_type="int" width="32">0</integer>
                </value_expression>
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
            </input>
            <function_call hidden="false" step_nr="14" thread="0">
                <function display_name="TmpTest.test2(int)" identifier="java::TmpTest.test2:(I)V">
                    <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
                </function>
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
            </function_call>
            <assignment assignment_type="actual_parameter" base_name="arg0i" display_name="java::TmpTest.test2:(I)V::arg0i" hidden="false" identifier="java::TmpTest.test2:(I)V::arg0i" mode="java" step_nr="15" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
                <type>int</type>
                <full_lhs>arg0i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="anonlocal::1i" display_name="TmpTest.test2:(I)V::anonlocal::1i" hidden="false" identifier="java::TmpTest.test2:(I)V::anonlocal::1i" mode="java" step_nr="16" thread="0">
                <type>int</type>
                <full_lhs>anonlocal::1i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="anonlocal::1i" display_name="TmpTest.test2:(I)V::anonlocal::1i" hidden="false" identifier="java::TmpTest.test2:(I)V::anonlocal::1i" mode="java" step_nr="17" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="68"/>
                <type>int</type>
                <full_lhs>anonlocal::1i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="anonlocal::1i" display_name="TmpTest.test2:(I)V::anonlocal::1i" hidden="false" identifier="java::TmpTest.test2:(I)V::anonlocal::1i" mode="java" step_nr="18" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="71"/>
                <type>int</type>
                <full_lhs>anonlocal::1i</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <location-only hidden="false" step_nr="19" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </location-only>
            <function_call hidden="false" step_nr="20" thread="0">
                <function display_name="java::TmpTest.&lt;clinit_wrapper&gt;" identifier="java::TmpTest.&lt;clinit_wrapper&gt;">
                    <location/>
                </function>
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </function_call>
            <assignment assignment_type="state" base_name="java::TmpTest::clinit_already_run" display_name="java::TmpTest::clinit_already_run" hidden="false" identifier="java::TmpTest::clinit_already_run" mode="java" step_nr="22" thread="0">
                <type>__CPROVER_bool</type>
                <full_lhs>java$$TmpTest$$clinit_already_run</full_lhs>
                <full_lhs_value>true</full_lhs_value>
            </assignment>
            <function_call hidden="false" step_nr="24" thread="0">
                <function display_name="TmpTest.&lt;clinit&gt;()" identifier="java::TmpTest.&lt;clinit&gt;:()V">
                    <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
                </function>
            </function_call>
            <assignment assignment_type="state" base_name="$stack_tmp1" display_name="java::TmpTest.&lt;clinit&gt;:()V::$stack_tmp1" hidden="true" identifier="java::TmpTest.&lt;clinit&gt;:()V::$stack_tmp1" mode="java" step_nr="25" thread="0">
                <type>int</type>
                <full_lhs>$stack_tmp1</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="return_tmp0" display_name="java::TmpTest.&lt;clinit&gt;:()V::return_tmp0" hidden="true" identifier="java::TmpTest.&lt;clinit&gt;:()V::return_tmp0" mode="java" step_nr="26" thread="0">
                <type>boolean</type>
                <full_lhs>return_tmp0</full_lhs>
                <full_lhs_value binary="00000000">false</full_lhs_value>
            </assignment>
            <location-only hidden="false" step_nr="27" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </location-only>
            <function_call hidden="false" step_nr="28" thread="0">
                <function display_name="java.lang.Class.desiredAssertionStatus()" identifier="java::java.lang.Class.desiredAssertionStatus:()Z">
                    <location/>
                </function>
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </function_call>
            <assignment assignment_type="actual_parameter" base_name="this" display_name="java::java.lang.Class.desiredAssertionStatus:()Z::this" hidden="false" identifier="java::java.lang.Class.desiredAssertionStatus:()Z::this" mode="java" step_nr="29" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
                <type>struct java.lang.Class *</type>
                <full_lhs>this</full_lhs>
                <full_lhs_value binary="0000000000000010000000000000000000000000000000000000000000000000">&amp;TmpTest@class_model</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="to_return" display_name="java::java.lang.Class.desiredAssertionStatus:()Z::to_return" hidden="true" identifier="java::java.lang.Class.desiredAssertionStatus:()Z::to_return" mode="java" step_nr="30" thread="0">
                <type>boolean</type>
                <full_lhs>to_return</full_lhs>
                <full_lhs_value binary="00000001">true</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="desiredAssertionStatus#return_value" display_name="java::java.lang.Class.desiredAssertionStatus:()Z#return_value" hidden="true" identifier="java::java.lang.Class.desiredAssertionStatus:()Z#return_value" mode="java" step_nr="31" thread="0">
                <type>boolean</type>
                <full_lhs>java.lang.Class.desiredAssertionStatus:()Z#return_value</full_lhs>
                <full_lhs_value binary="00000001">true</full_lhs_value>
            </assignment>
            <function_return hidden="false" step_nr="32" thread="0">
                <function display_name="java.lang.Class.desiredAssertionStatus()" identifier="java::java.lang.Class.desiredAssertionStatus:()Z">
                    <location/>
                </function>
            </function_return>
            <assignment assignment_type="state" base_name="return_tmp0" display_name="java::TmpTest.&lt;clinit&gt;:()V::return_tmp0" hidden="true" identifier="java::TmpTest.&lt;clinit&gt;:()V::return_tmp0" mode="java" step_nr="33" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
                <type>boolean</type>
                <full_lhs>return_tmp0</full_lhs>
                <full_lhs_value binary="00000001">true</full_lhs_value>
            </assignment>
            <location-only hidden="false" step_nr="34" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </location-only>
            <location-only hidden="false" step_nr="35" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </location-only>
            <assignment assignment_type="state" base_name="$stack_tmp1" display_name="java::TmpTest.&lt;clinit&gt;:()V::$stack_tmp1" hidden="true" identifier="java::TmpTest.&lt;clinit&gt;:()V::$stack_tmp1" mode="java" step_nr="36" thread="0">
                <type>int</type>
                <full_lhs>$stack_tmp1</full_lhs>
                <full_lhs_value binary="00000000000000000000000000000000">0</full_lhs_value>
            </assignment>
            <location-only hidden="false" step_nr="37" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </location-only>
            <function_call hidden="false" step_nr="38" thread="0">
                <function display_name="java::TmpTest.&lt;clinit_wrapper&gt;" identifier="java::TmpTest.&lt;clinit_wrapper&gt;">
                    <location/>
                </function>
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
            </function_call>
            <function_return hidden="false" step_nr="40" thread="0">
                <function display_name="java::TmpTest.&lt;clinit_wrapper&gt;" identifier="java::TmpTest.&lt;clinit_wrapper&gt;">
                    <location/>
                </function>
            </function_return>
            <assignment assignment_type="state" base_name="$assertionsDisabled" display_name="TmpTest.$assertionsDisabled" hidden="false" identifier="java::TmpTest.$assertionsDisabled" mode="java" step_nr="41" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
                <type>const boolean</type>
                <full_lhs>$assertionsDisabled</full_lhs>
                <full_lhs_value binary="00000000">false</full_lhs_value>
            </assignment>
            <function_return hidden="false" step_nr="42" thread="0">
                <function display_name="TmpTest.&lt;clinit&gt;()" identifier="java::TmpTest.&lt;clinit&gt;:()V">
                    <location file="TmpTest.java" function="java::TmpTest.&lt;clinit&gt;:()V" line="4"/>
                </function>
            </function_return>
            <function_return hidden="false" step_nr="43" thread="0">
                <function display_name="java::TmpTest.&lt;clinit_wrapper&gt;" identifier="java::TmpTest.&lt;clinit_wrapper&gt;">
                    <location/>
                </function>
            </function_return>
            <location-only hidden="false" step_nr="44" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </location-only>
            <assignment assignment_type="state" base_name="new_tmp0" display_name="java::TmpTest.test2:(I)V::new_tmp0" hidden="true" identifier="java::TmpTest.test2:(I)V::new_tmp0" mode="java" step_nr="45" thread="0">
                <type>struct java.lang.AssertionError *</type>
                <full_lhs>new_tmp0</full_lhs>
                <full_lhs_value binary="0000000000000000000000000000000000000000000000000000000000000000">null</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="dynamic_object1" display_name="symex_dynamic::dynamic_object1" hidden="false" identifier="symex_dynamic::dynamic_object1" mode="java" step_nr="46" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
                <type>struct java.lang.AssertionError</type>
                <full_lhs>dynamic_object1</full_lhs>
                <full_lhs_value>{ .@class_identifier="java::java.lang.Class" }</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="dynamic_object1" display_name="symex_dynamic::dynamic_object1" hidden="false" identifier="symex_dynamic::dynamic_object1" mode="java" step_nr="47" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
                <type>struct java.lang.AssertionError</type>
                <full_lhs>dynamic_object1.@class_identifier</full_lhs>
                <full_lhs_value>"java::java.lang.Class"</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="new_tmp0" display_name="java::TmpTest.test2:(I)V::new_tmp0" hidden="true" identifier="java::TmpTest.test2:(I)V::new_tmp0" mode="java" step_nr="48" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
                <type>struct java.lang.AssertionError *</type>
                <full_lhs>new_tmp0</full_lhs>
                <full_lhs_value binary="0000000000000011000000000000000000000000000000000000000000000000">&amp;dynamic_object1</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="dynamic_object1" display_name="symex_dynamic::dynamic_object1" hidden="false" identifier="symex_dynamic::dynamic_object1" mode="java" step_nr="49" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
                <type>struct java.lang.AssertionError</type>
                <full_lhs>dynamic_object1.@class_identifier</full_lhs>
                <full_lhs_value>"java::java.lang.AssertionError"</full_lhs_value>
            </assignment>
            <location-only hidden="false" step_nr="50" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </location-only>
            <function_call hidden="false" step_nr="51" thread="0">
                <function display_name="java.lang.AssertionError.&lt;init&gt;()" identifier="java::java.lang.AssertionError.&lt;init&gt;:()V">
                    <location/>
                </function>
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </function_call>
            <assignment assignment_type="actual_parameter" base_name="this" display_name="java::java.lang.AssertionError.&lt;init&gt;:()V::this" hidden="false" identifier="java::java.lang.AssertionError.&lt;init&gt;:()V::this" mode="java" step_nr="52" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
                <type>struct java.lang.AssertionError *</type>
                <full_lhs>this</full_lhs>
                <full_lhs_value binary="0000000000000011000000000000000000000000000000000000000000000000">&amp;dynamic_object1</full_lhs_value>
            </assignment>
            <assignment assignment_type="state" base_name="to_construct" display_name="java::java.lang.AssertionError.&lt;init&gt;:()V::to_construct" hidden="true" identifier="java::java.lang.AssertionError.&lt;init&gt;:()V::to_construct" mode="java" step_nr="53" thread="0">
                <type>struct java.lang.AssertionError *</type>
                <full_lhs>to_construct</full_lhs>
                <full_lhs_value binary="0000000000000011000000000000000000000000000000000000000000000000">&amp;dynamic_object1</full_lhs_value>
            </assignment>
            <function_return hidden="false" step_nr="54" thread="0">
                <function display_name="java.lang.AssertionError.&lt;init&gt;()" identifier="java::java.lang.AssertionError.&lt;init&gt;:()V">
                    <location/>
                </function>
            </function_return>
            <failure hidden="false" property="java::TmpTest.test2:(I)V.assertion.1" reason="assertion at file TmpTest.java line 73 function java::TmpTest.test2:(I)V bytecode-index 9" step_nr="55" thread="0">
                <location file="TmpTest.java" function="java::TmpTest.test2:(I)V" line="73"/>
            </failure>
        </goto_trace>
    </result>

    <result property="array-create-negative-size.8" status="SUCCESS"/>

    <result property="java::TmpTest.test2:(I)V.null-pointer-exception.1" status="SUCCESS"/>

    <message type="STATUS-MESSAGE">
        <text>VERIFICATION FAILED</text>
    </message>

    <cprover-status>FAILURE</cprover-status>

</cprover>
